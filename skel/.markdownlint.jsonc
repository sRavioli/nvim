// This document contains a description of all rules, what they are checking for, 
// as well as examples of documents that break the rule and corrected versions 
// of the examples.
{
  "$schema": "https://raw.githubusercontent.com/DavidAnson/markdownlint/main/schema/markdownlint-config-schema.json",

  // Default state for all rules
  "default": true,

  // Path to configuration file to extend
  "extends": null,

  // MD001/heading-increment - Heading levels should only increment by one level at a time
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md001.md
  //
  // Tags: `headings`
  //
  // Aliases: `heading-increment`
  //
  // This rule is triggered when you skip heading levels in a Markdown document
  // When using multiple heading levels, nested headings should increase by only
  // one level at a time.
  //
  // Rationale: Headings represent the structure of a document and can be confusing
  // when skipped - especially for accessibility scenarios. More information:
  // https://www.w3.org/WAI/tutorials/page-structure/headings/.
  "MD001": true,

  // MD003/heading-style - Heading style
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md003.md
  //
  // Tags: `headings`
  //
  // Aliases: `heading-style`
  //
  // Parameters:
  //
  // - `style`: Heading style (`string`, default `consistent`, values `atx` / 
  //   `atx_closed` / `consistent` / `setext` / `setext_with_atx` / `setext_with_atx_closed`)
  //
  // This rule is triggered when different heading styles are used in the same document
  //
  // To fix the issue, use consistent heading styles throughout the document.
  //
  // The `setext_with_atx` and `setext_with_atx_closed` settings allow ATX-style 
  // headings of level 3 or more in documents with setext-style headings (which only 
  // support level 1 and 2 headings):
  //
  // NOTE: The configured heading style can be a specific style to require (`atx`, 
  //       `atx_closed`, `setext`, `setext_with_atx`, `setext_with_atx_closed`), or 
  //       may just require that usage is consistent within the document via 
  //       `consistent`.
  //
  // NOTE: The placement of a horizontal rule directly below a line of text can 
  //       trigger this rule by turning that text into a level 2 setext-style heading:
  //   
  //       ```md
  //       A line of text followed by a horizontal rule becomes a heading
  //       ---
  //       ```
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD003": {
    // Heading style
    "style": "consistent"
  },

  // MD004/ul-style - Unordered list style
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md004.md
  //
  // Tags: `bullet`, `ul`
  //
  // Aliases: `ul-style`
  //
  // Parameters:
  //
  // - `style`: List style (`string`, default `consistent`, values `asterisk` / 
  // `consistent` / `dash` / `plus` / `sublist`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when the symbols used in the document for unordered 
  // list items do not match the configured unordered list style.
  //
  // To fix this issue, use the configured style for list items throughout the 
  // document:
  //
  // The configured list style can be a specific symbol to use (asterisk, plus, dash), 
  // to ensure that all list styling is consistent, or to ensure that each sublist 
  // has a consistent symbol that differs from its parent list.
  //
  // For example, the following is valid for the `sublist` style because the outer-most 
  // indent uses asterisk, the middle indent uses plus, and the inner-most indent 
  // uses dash:
  //
  // ```md
  // * Item 1
  //   + Item 2
  //     - Item 3
  //   + Item 4
  // * Item 4
  //   + Item 5
  // ```
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD004": {
    // List style
    "style": "consistent"
  },

  // MD005/list-indent - Inconsistent indentation for list items at the same level
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md005.md
  //
  // Tags: `bullet`, `indentation`, `ul`
  //
  // Aliases: `list-indent`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when list items are parsed as being at the same level, 
  // but don't have the same indentation.
  //
  // Usually, this rule will be triggered because of a typo. Correct the indentation 
  // for the list to fix it.
  //
  // Sequentially-ordered list markers are usually left-aligned such that all items 
  // have the same starting column.
  //
  // This rule also supports right-alignment of list markers such that all items
  // have the same ending column.
  //
  // Rationale: Violations of this rule can lead to improperly rendered content.
  "MD005": true,

  // MD007/ul-indent - Unordered list indentation
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md007.md
  // Tags: `bullet`, `indentation`, `ul`
  //
  // Aliases: `ul-indent`
  //
  // Parameters:
  //
  // - `indent`: Spaces for indent (`integer`, default `2`)
  // - `start_indent`: Spaces for first level indent (when start_indented is set) 
  //   (`integer`, default `2`) 
  // - `start_indented`: Whether to indent the first level of the list (`boolean`,
  //   default `false`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when list items are not indented by the configured
  // number of spaces (default: 2).
  //
  // NOTE: This rule applies to a sublist only if its parent lists are all also
  //       unordered (otherwise, extra indentation of ordered lists interferes with 
  //       the rule).
  //
  // The `start_indented` parameter allows the first level of lists to be indented
  // by the configured number of spaces rather than starting at zero. The
  // `start_indent` parameter allows the first level of lists to be indented by
  // a different number of spaces than the rest (ignored when `start_indented` is
  // not set).
  //
  // Rationale: Indenting by 2 spaces allows the content of a nested list to be in
  // line with the start of the content of the parent list when a single space is
  // used after the list marker. Indenting by 4 spaces is consistent with code
  // blocks and simpler for editors to implement. Additionally, this can be
  // a compatibility issue for other Markdown parsers, which require 4-space
  // indents. More information: Markdown Style Guide.
  "MD007": {
    // Spaces for indent
    "indent": 2,
    // Whether to indent the first level of the list
    "start_indented": false,
    // Spaces for first level indent (when start_indented is set)
    "start_indent": 2
  },

  // MD009/no-trailing-spaces - Trailing spaces
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md009.md
  // Tags: `whitespace`
  //
  // Aliases: `no-trailing-spaces`
  //
  // Parameters:
  //
  // - `br_spaces`: Spaces for line break (`integer`, default `2`)
  // - `list_item_empty_lines`: Allow spaces for empty lines in list items (`boolean`, 
  //   default `false`)
  // - `strict`: Include unnecessary breaks (`boolean`, default `false`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered on any lines that end with unexpected whitespace. To fix
  // this, remove the trailing space from the end of the line.
  //
  // NOTE: Trailing space is allowed in indented and fenced code blocks because 
  //       some languages require it.
  //
  // The `br_spaces` parameter allows an exception to this rule for a specific
  // number of trailing spaces, typically used to insert an explicit line break. The
  // default value allows 2 spaces to indicate a hard break (<br> element).
  //
  // NOTE: You must set `br_spaces` to a value >= 2 for this parameter to take
  //       effect. Setting `br_spaces` to 1 behaves the same as 0, disallowing any
  //       trailing spaces.
  //
  // By default, this rule will not trigger when the allowed number of spaces is
  // used, even when it doesn't create a hard break (for example, at the end of
  // a paragraph). To report such instances as well, set the `strict` parameter to
  // `true`.
  // 
  // Using spaces to indent blank lines inside a list item is usually not necessary,
  // but some parsers require it. Set the `list_item_empty_lines` parameter to
  // `true` to allow this (even when `strict` is `true`):
  //
  // Rationale: Except when being used to create a line break, trailing whitespace
  // has no purpose and does not affect the rendering of content.
  "MD009": {
    // Spaces for line break
    "br_spaces": 2,
    // Allow spaces for empty lines in list items
    "list_item_empty_lines": false,
    // Include unnecessary breaks
    "strict": true
  },

  // MD010/no-hard-tabs - Hard tabs
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md010.md
  //
  // Tags: `hard_tab`, `whitespace`
  //
  // Aliases: `no-hard-tabs`
  //
  // Parameters:
  //
  // - `code_blocks`: Include code blocks (`boolean`, default `true`)
  // - `ignore_code_languages`: Fenced code languages to ignore (`string[]`, default `[]`)
  // - `spaces_per_tab`: Number of spaces for each hard tab (`integer`, default `1`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered by any lines that contain hard tab characters instead of
  // using spaces for indentation. To fix this, replace any hard tab characters with
  // spaces instead.
  //
  // Example:
  //
  // ```md
  // Some text
  //
  // * hard tab character used to indent the list item
  // ```
  //
  // Corrected example:
  //
  // ```md
  // Some text
  //
  //     * Spaces used to indent the list item instead
  // ```
  //
  // You have the option to exclude this rule for code blocks and spans. To do so,
  // set the `code_blocks` parameter to `false`. Code blocks and spans are included
  // by default since handling of tabs by Markdown tools can be inconsistent (e.g.,
  // using 4 vs. 8 spaces).
  //
  // When code blocks are scanned (e.g., by default or if `code_blocks` is `true`),
  // the `ignore_code_languages` parameter can be set to a list of languages that
  // should be ignored (i.e., hard tabs will be allowed, though not required). This
  // makes it easier for documents to include code for languages that require hard
  // tabs.
  //
  // By default, violations of this rule are fixed by replacing the tab with
  // 1 space character. To use a different number of spaces, set the
  // `spaces_per_tab` parameter to the desired value.
  //
  // Rationale: Hard tabs are often rendered inconsistently by different editors and
  // can be harder to work with than spaces.
  "MD010": {
    // Include code blocks
    "code_blocks": true,
    // Fenced code languages to ignore
    "ignore_code_languages": [],
    // Number of spaces for each hard tab
    "spaces_per_tab": 1
  },

  // MD011/no-reversed-links - Reversed link syntax
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md011.md
  //
  // Tags: `links`
  //
  // Aliases: `no-reversed-links`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when text that appears to be a link is encountered, but
  // where the syntax appears to have been reversed (the `[]` and `()` are
  // reversed)
  //
  // To fix this, swap the `[]` and `()` around.
  //
  // NOTE: Markdown Extra-style footnotes do not trigger this rule:
  //       
  //       ```md
  //       For (example)[^1]
  //       ```
  //
  // Rationale: Reversed links are not rendered as usable links.
  "MD011": true,

  // MD012/no-multiple-blanks - Multiple consecutive blank lines
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md012.md
  //
  // Tags: `blank_lines`, `whitespace`
  //
  // Aliases: `no-multiple-blanks`
  //
  // Parameters:
  //
  // - `maximum`: Consecutive blank lines (`integer`, default `1`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when there are multiple consecutive blank lines in the
  // document.
  //
  // To fix this, delete the offending lines.
  //
  // NOTE: this rule will not be triggered if there are multiple consecutive
  //       blank lines inside code blocks.
  //
  // NOTE: The `maximum` parameter can be used to configure the maximum number of
  //       consecutive blank lines.
  //
  // Rationale: Except in a code block, blank lines serve no purpose and do not
  // affect the rendering of content. 
  "MD012": {
    // Consecutive blank lines
    "maximum": 1
  },

  // MD013/line-length - Line length
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md013.md
  //
  // Tags: `line_length`
  //
  // Aliases: `line-length`
  //
  // Parameters:
  //
  // - `code_block_line_length`: Number of characters for code blocks (`integer`, default `80`)
  // - `code_blocks`: Include code blocks (`boolean`, default `true`)
  // - `heading_line_length`: Number of characters for headings (`integer`, default `80`)
  // - `headings`: Include headings (`boolean`, default `true`)
  // - `line_length`: Number of characters (`integer`, default `80`)
  // - `stern`: Stern length checking (`boolean`, default `false`)
  // - `strict`: Strict length checking (`boolean`, default `false`)
  // - `tables`: Include tables (`boolean`, default `true`)
  //
  // This rule is triggered when there are lines that are longer than the configured
  // `line_length` (default: 80 characters). To fix this, split the line up into
  // multiple lines. To set a different maximum length for headings, use
  // `heading_line_length`. To set a different maximum length for code blocks, use
  // `code_block_line_length`
  //
  // This rule has an exception when there is no whitespace beyond the configured
  // line length. This allows you to include items such as long URLs without being
  // forced to break them in the middle. To disable this exception, set the `strict`
  // parameter to `true` and an issue will be reported when any line is too long. To
  // warn for lines that are too long and could be fixed but allow long lines
  // without spaces, set the `stern` parameter to `true`.
  //
  // For example (assuming normal behavior):
  //
  // ```md
  // IF THIS LINE IS THE MAXIMUM LENGTH
  // This line is okay because there are-no-spaces-beyond-that-length
  // And this line is a violation because there are 
  // This-line-is-also-okay-because-there-are-no-spaces
  // ```
  //
  // In `strict` or `stern` modes, the two middle lines above are a violation. The
  // third line is a violation in `strict` mode but allowed in `stern` mode.
  //
  // You have the option to exclude this rule for code blocks, tables, or headings.
  // To do so, set the `code_blocks`, `tables`, or `headings` parameter(s) to false.
  //
  // Code blocks are included in this rule by default since it is often
  // a requirement for document readability, and tentatively compatible with code
  // rules. Still, some languages do not lend themselves to short lines.
  //
  // Lines with link/image reference definitions are always exempted from this rule
  // (even in `strict` mode) because there is generally no way to split such lines
  // without breaking the URL.
  //
  // Rationale: Extremely long lines can be difficult to work with in some editors.
  // More information: <https://cirosantilli.com/markdown-style-guide#line-wrapping.>
  "MD013": {
    // Number of characters
    "line_length": 80,
    // Number of characters for headings
    "heading_line_length": 80,
    // Number of characters for code blocks
    "code_block_line_length": 80,
    // Include code blocks
    "code_blocks": false,
    // Include tables
    "tables": false,
    // Include headings
    "headings": true,
    // Strict length checking
    "strict": false,
    // Stern length checking
    "stern": false
  },

  // MD014/commands-show-output - Dollar signs used before commands without showing output
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md014.md
  //
  // Tags: `code`
  //
  // Aliases: `commands-show-output`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when there are code blocks showing shell commands to be
  // typed, and _all_ of the shell commands are preceded by dollar signs ($).
  //
  // The dollar signs are unnecessary in this situation, and should not be included.
  //
  // Showing output for commands preceded by dollar signs does not trigger this
  // rule.
  //
  // Because some commands do not produce output, it is not a violation if _some_
  // commands do not have output.
  //
  // Rationale: It is easier to copy/paste and less noisy if the dollar signs are
  // omitted when they are not needed. See
  // <https://cirosantilli.com/markdown-style-guide#dollar-signs-in-shell-code> for
  // more information.
  "MD014": true,

  // MD018/no-missing-space-atx - No space after hash on atx style heading
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md018.md
  //
  // Tags: `atx`, `headings`, `spaces`
  //
  // Aliases: `no-missing-space-atx`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when spaces are missing after the hash characters in an
  // atx style heading:
  //
  // To fix this, separate the heading text from the hash character by a single
  // space.
  //
  // Rationale: Violations of this rule can lead to improperly rendered content.
  "MD018": true,

  // MD019/no-multiple-space-atx - Multiple spaces after hash on atx style heading
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md019.md
  //
  // Tags: `atx`, `headings`, `spaces`
  //
  // Aliases: `no-multiple-space-atx`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when more than one space is used to separate the heading
  // text from the hash characters in an atx style heading:
  //
  // To fix this, separate the heading text from the hash character by a single
  // space.
  //
  // Rationale: Extra space has no purpose and does not affect the rendering of
  // content.
  "MD019": true,

  // MD020/no-missing-space-closed-atx - No space inside hashes on closed atx style heading
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md020.md
  //
  // Tags: `atx_closed`, `headings`, `spaces`
  //
  // Aliases: `no-missing-space-closed-atx`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when spaces are missing inside the hash characters in
  // a closed atx style heading.
  //
  // To fix this, separate the heading text from the hash character by a single space.
  //
  // NOTE: this rule will fire if either side of the heading is missing spaces.
  //
  // Rationale: Violations of this rule can lead to improperly rendered content.
  "MD020": true,

  // MD021/no-multiple-space-closed-atx - Multiple spaces inside hashes on closed atx style heading
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md021.md
  //
  // Tags: `atx_closed`, `headings`, `spaces`
  //
  // Aliases: `no-multiple-space-closed-atx`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when more than one space is used to separate the heading
  // text from the hash characters in a closed atx style heading.
  //
  // To fix this, separate the heading text from the hash character by a single
  // space.
  //
  // NOTE: this rule will fire if either side of the heading contains multiple spaces.
  //
  // Rationale: Extra space has no purpose and does not affect the rendering of content.
  "MD021": true,

  // MD022/blanks-around-headings - Headings should be surrounded by blank lines
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md022.md
  //
  // Tags: `blank_lines`, `headings`
  //
  // Aliases: `blanks-around-headings`
  //
  // Parameters:
  //
  // - `lines_above`: Blank lines above heading (`integer|integer[]`, default `1`)
  // - `lines_below`: Blank lines below heading (`integer|integer[]`, default `1`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when headings (any style) are either not preceded or not
  // followed by at least one blank line.
  //
  // To fix this, ensure that all headings have a blank line both before and after
  // (except where the heading is at the beginning or end of the document).
  //
  // The `lines_above` and `lines_below` parameters can be used to specify
  // a different number of blank lines (including `0`) above or below each heading.
  // If the value `-1` is used for either parameter, any number of blank lines is
  // allowed. To customize the number of lines above or below each heading level
  // individually, specify a `number[]` where values correspond to heading levels
  // 1-6 (in order).
  //
  // NOTE: If `lines_above` or `lines_below` are configured to require more than
  //       one blank line, MD012/no-multiple-blanks should also be customized. This
  //       rule checks for _at least_ as many blank lines as specified; any extra 
  //       blank lines are ignored.
  //
  // Rationale: Aside from aesthetic reasons, some parsers, including `kramdown`,
  // will not parse headings that don't have a blank line before, and will parse
  // them as regular text.
  "MD022": {
    // Blank lines above heading
    "lines_above": 1,
    // Blank lines below heading
    "lines_below": 1
  },

  // MD023/heading-start-left - Headings must start at the beginning of the line
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md023.md
  //
  // Tags: `headings`, `spaces`
  //
  // Aliases: `heading-start-left`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when a heading is indented by one or more spaces.
  //
  // ```md
  // Some text
  //
  //   # Indented heading
  // ```
  //
  // To fix this, ensure that all headings start at the beginning of the line.
  //
  // ```md
  // Some text
  //
  // # Heading
  // ```
  //
  // Note that scenarios like block quotes "indent" the start of the line, so the
  // following is also correct:
  //
  // ```md
  // > # Heading in Block Quote
  // ```
  //
  // Rationale: Headings that don't start at the beginning of the line will not be
  // parsed as headings, and will instead appear as regular text.
  "MD023": true,

  // MD024/no-duplicate-heading - Multiple headings with the same content
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md024.md
  //
  // Tags: `headings`
  //
  // Aliases: `no-duplicate-heading`
  //
  // Parameters:
  //
  // - `allow_different_nesting`: Only check sibling headings (`boolean`, default `false`)
  // - `siblings_only`: Only check sibling headings (`boolean`, default `false`)
  //
  // This rule is triggered if there are multiple headings in the document that have
  // the same text.
  //
  // To fix this, ensure that the content of each heading is different.
  //
  // If the parameter `siblings_only` (alternatively `allow_different_nesting`) is
  // set to `true`, heading duplication is allowed for non-sibling headings (common
  // in changelogs).
  //
  // ```md
  // # Change log
  //
  // ## 1.0.0
  //
  // ### Features
  //
  // ## 2.0.0
  //
  // ### Features
  // ```
  //
  // Rationale: Some Markdown parsers generate anchors for headings based on the
  // heading name; headings with the same content can cause problems with that.
  "MD024": {
    // Only check sibling headings
    "allow_different_nesting": false,
    // Only check sibling headings
    "siblings_only": false
  },

  // MD025/single-title/single-h1 - Multiple top-level headings in the same document
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md025.md
  //
  // Tags: `headings`
  //
  // Aliases: `single-h1`, `single-title`
  //
  // Parameters:
  //
  // - `front_matter_title`: RegExp for matching title in front matter (`string`,
  //   default `^\s*title\s*[:=]`).
  // - `level`: Heading level (`integer`, default `1`)
  //
  // This rule is triggered when a top-level heading is in use (the first line of
  // the file is an h1 heading), and more than one h1 heading is in use in the
  // document.
  //
  // To fix, structure your document so there is a single h1 heading that is the
  // title for the document. Subsequent headings must be lower-level headings (h2,
  // h3, etc.).
  //
  // NOTE: The `level` parameter can be used to change the top-level (ex: to h2)
  //       in cases where an h1 is added externally.
  //
  // If YAML front matter is present and contains a `title` property (commonly used
  // with blog posts), this rule treats that as a top level heading and will report
  // a violation for any subsequent top-level headings. To use a different property
  // name in the front matter, specify the text of a regular expression via the
  // `front_matter_title` parameter. To disable the use of front matter by this
  // rule, specify `""` for `front_matter_title`.
  //
  // Rationale: A top-level heading is an h1 on the first line of the file, and
  // serves as the title for the document. If this convention is in use, then there
  // can not be more than one title for the document, and the entire document should
  // be contained within this heading.
  "MD025": {
    // Heading level
    "level": 1,
    // RegExp for matching title in front matter
    "front_matter_title": "^\\s*title\\s*[:=]"
  },

  // MD026/no-trailing-punctuation - Trailing punctuation in heading
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md026.md
  //
  // Tags: `headings`
  //
  // Aliases: `no-trailing-punctuation`
  //
  // Parameters:
  //
  // - `punctuation`: Punctuation characters (`string`, default `.,;:!。，；：！`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered on any heading that has one of the specified normal or
  // full-width punctuation characters as the last character in the line.
  //
  // To fix this, remove the trailing punctuation.
  //
  // Note: The `punctuation` parameter can be used to specify what characters count
  // as punctuation at the end of a heading. For example, you can change it to
  // `".,;:"` to allow headings that end with an exclamation point. `?` is allowed
  // by default because of how common it is in headings of FAQ-style documents.
  // Setting the `punctuation` parameter to `""` allows all characters - and is
  // equivalent to disabling the rule.
  //
  // Note: The trailing semicolon of HTML entity references like `&copy;`, `&#169;`,
  // and `&#x000A9;` is ignored by this rule.
  //
  // Rationale: Headings are not meant to be full sentences. 
  "MD026": {
    // Punctuation characters
    "punctuation": ".,;:!。，；：！"
  },

  // MD027/no-multiple-space-blockquote - Multiple spaces after blockquote symbol
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md027.md
  //
  // Tags: `blockquote`, `indentation`, `whitespace`
  //
  // Aliases: `no-multiple-space-blockquote`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when blockquotes have more than one space after the
  // blockquote (`>`) symbol.
  //
  // To fix, remove any extraneous space.
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD027": true,

  // MD028/no-blanks-blockquote - Blank line inside blockquote
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md028.md
  //
  // Tags: `blockquote`, `whitespace`
  //
  // Aliases: `no-blanks-blockquote`
  //
  // This rule is triggered when two blockquote blocks are separated by nothing
  // except for a blank line.
  //
  // To fix this, ensure that any blockquotes that are right next to each other have
  // some text in between.
  //
  // Alternatively, if they are supposed to be the same quote, then add the
  // blockquote symbol at the beginning of the blank line.
  //
  // Rationale: Some Markdown parsers will treat two blockquotes separated by one or
  // more blank lines as the same blockquote, while others will treat them as
  // separate blockquotes.
  "MD028": true,

  // MD029/ol-prefix - Ordered list item prefix
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md029.md
  //
  // Tags: `ol`
  //
  // Aliases: `ol-prefix`
  //
  // Parameters:
  //
  // - `style`: List style (`string`, default `one_or_ordered`, values `one` / 
  //   `one_or_ordered` / `ordered` / `zero`)
  //
  // This rule is triggered for ordered lists that do not either start with '1.' or
  // do not have a prefix that increases in numerical order (depending on the
  // configured style). The less-common pattern of using '0.' as a first prefix or
  // for all prefixes is also supported.
  //
  // Example valid list if the style is configured as 'one':
  //
  // ```md
  // 1. Do this.
  // 1. Do that.
  // 1. Done.
  // ```
  //
  // Examples of valid lists if the style is configured as 'ordered':
  //
  // ```md
  // 1. Do this.
  // 2. Do that.
  // 3. Done.
  // ```
  //
  // ```md
  // 0. Do this.
  // 1. Do that.
  // 2. Done.
  // ```
  //
  // All three examples are valid when the style is configured as 'one_or_ordered'.
  //
  // Example valid list if the style is configured as 'zero':
  //
  // ```md
  // 0. Do this.
  // 0. Do that.
  // 0. Done.
  // ```
  //
  // Example invalid list for all styles:
  //
  // ```md
  // 1. Do this.
  // 3. Done.
  // ```
  //
  // This rule supports 0-prefixing ordered list items for uniform indentation:
  //
  // ```md
  // ...
  // 08. Item
  // 09. Item
  // 10. Item
  // 11. Item
  // ...
  // ```
  //
  // NOTE: This rule will report violations for cases like the following where an
  //       improperly-indented code block (or similar) appears between two list items 
  //       and "breaks" the list in two.
  //       
  //       The fix is to indent the code block so it becomes part of the preceding 
  //       list item as intended.
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD029": {
    // List style
    "style": "one_or_ordered"
  },

  // MD030/list-marker-space - Spaces after list markers
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md030.md
  //
  // Tags: `ol`, `ul`, `whitespace`
  //
  // Aliases: `list-marker-space`
  //
  // Parameters:
  //
  // - `ol_multi`: Spaces for multi-line ordered list items (`integer`, default `1`)
  // - `ol_single`: Spaces for single-line ordered list items (`integer`, default `1`)
  // - `ul_multi`: Spaces for multi-line unordered list items (`integer`, default `1`)
  // - `ul_single`: Spaces for single-line unordered list items (`integer`, default `1`)
  //
  // Fixable: Some violations can be fixed by tooling.
  //
  // This rule checks for the number of spaces between a list marker (e.g. '`-`',
  // '`*`', '`+`' or '`1.`') and the text of the list item.
  //
  // The number of spaces checked for depends on the document style in use, but the
  // default is 1 space after any list marker.
  //
  // A document style may change the number of spaces after unordered list items and
  // ordered list items independently, as well as based on whether the content of
  // every item in the list consists of a single paragraph or multiple paragraphs
  // (including sub-lists and code blocks).
  //
  // For example, the style guide at
  // <https://cirosantilli.com/markdown-style-guide#spaces-after-list-marker>
  // specifies that 1 space after the list marker should be used if every item in
  // the list fits within a single paragraph, but to use 2 or 3 spaces (for ordered
  // and unordered lists respectively) if there are multiple paragraphs of content
  // inside the list.
  //
  // To fix this, ensure the correct number of spaces are used after the list marker
  // for your selected document style.
  //
  // Rationale: Violations of this rule can lead to improperly rendered content.
  "MD030": {
    // Spaces for single-line unordered list items
    "ul_single": 1,
    // Spaces for single-line ordered list items
    "ol_single": 1,
    // Spaces for multi-line unordered list items
    "ul_multi": 1,
    // Spaces for multi-line ordered list items
    "ol_multi": 1
  },

  // MD031/blanks-around-fences - Fenced code blocks should be surrounded by blank lines
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md031.md
  //
  // Tags: `blank_lines`, `code`
  //
  // Aliases: `blanks-around-fences`
  //
  // Parameters:
  //
  // - `list_items`: Include list items (`boolean`, default `true`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when fenced code blocks are either not preceded or not
  // followed by a blank line.
  //
  // To fix this, ensure that all fenced code blocks have a blank line both before
  // and after (except where the block is at the beginning or end of the document).
  //
  // Set the `list_items` parameter to `false` to disable this rule for list items.
  // Disabling this behavior for lists can be useful if it is necessary to create
  // a tight list containing a code fence.
  //
  // Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will
  // not parse fenced code blocks that don't have blank lines before and after them.
  "MD031": {
    // Include list items
    "list_items": true
  },

  // MD032/blanks-around-lists - Lists should be surrounded by blank lines
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md032.md
  //
  // Tags: `blank_lines`, `bullet`, `ol`, `ul`
  //
  // Aliases: `blanks-around-lists`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when lists (of any kind) are either not preceded or not
  // followed by a blank line.
  //
  // To fix violations of this rule, ensure that all lists have a blank line both
  // before and after (except when the list is at the very beginning or end of the
  // document).
  //
  // NOTE: the following case is **not** a violation of this rule:
  //       
  //       ```md
  //       1. List item
  //          More item 1
  //       2. List item
  //       More item 2
  //       ```
  //
  // Although it is not indented, the text "More item 2" is referred to as a lazy
  // continuation line and considered part of the second list item.
  //
  // Rationale: In addition to aesthetic reasons, some parsers, including kramdown,
  // will not parse lists that don't have blank lines before and after them.
  "MD032": true,

  // MD033/no-inline-html - Inline HTML
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md033.md
  //
  // Tags: `html`
  //
  // Aliases: `no-inline-html`
  //
  // Parameters:
  //
  // - `allowed_elements`: Allowed elements (`string[]`, default `[]`)
  //
  // This rule is triggered whenever raw HTML is used in a Markdown document.
  //
  // To fix this, use 'pure' Markdown instead of including raw HTML.
  //
  // NOTE: To allow specific HTML elements, use the `allowed_elements` parameter.
  //
  // Rationale: Raw HTML is allowed in Markdown, but this rule is included for those
  // who want their documents to only include "pure" Markdown, or for those who are
  // rendering Markdown documents into something other than HTML.
  "MD033": {
    // Allowed elements
    "allowed_elements": []
  },

  // MD034/no-bare-urls - Bare URL used
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md034.md
  //
  // Tags: `links`, `url`
  //
  // Aliases: `no-bare-urls`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered whenever a URL or email address appears without
  // surrounding angle brackets.
  //
  // To fix this, add angle brackets around the URL or email address.
  //
  // NOTE: To include a bare URL or email without it being converted into a link,
  //       wrap it in a code span:
  //       
  //       ```md
  //       Not a clickable link: `https://www.example.com`
  //       ```
  //
  // NOTE: The following scenario does not trigger this rule because it could be
  //       a shortcut link:
  //       
  //       ```md
  //       [https://www.example.com]
  //       ```
  //
  //
  // NOTE: The following syntax triggers this rule because the nested link could be
  //       a shortcut link (which takes precedence):
  //       
  //       ```md
  //       [text [shortcut] text](https://example.com)
  //       ```
  //       
  //       To avoid this, escape both inner brackets:
  //       
  //       ```md
  //       [link \[text\] link](https://example.com)
  //       ```
  //
  // Rationale: Without angle brackets, a bare URL or email isn't converted into
  // a link by some Markdown parsers.
  "MD034": true,

  // MD035/hr-style - Horizontal rule style
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md035.md
  //
  // Tags: `hr`
  //
  // Aliases: `hr-style`
  //
  // Parameters:
  //
  // - `style`: Horizontal rule style (`string`, default `consistent`)
  //
  // This rule is triggered when inconsistent styles of horizontal rules are used 
  // in the document.
  //
  // To fix this, ensure any horizontal rules used in the document are consistent,
  // or match the given style if the rule is so configured.
  //
  // NOTE: by default, this rule is configured to just require that all horizontal
  //       rules in the document are the same and will trigger if any of the horizontal
  //       rules are different than the first one encountered in the document. If 
  //       you want to configure the rule to match a specific style, the parameter 
  //       given to the 'style' option is a string containing the exact horizontal 
  //       rule text that is allowed.
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD035": {
    // Horizontal rule style
    "style": "consistent"
  },

  // MD036/no-emphasis-as-heading - Emphasis used instead of a heading
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md036.md
  //
  // Tags: `emphasis`, `headings`
  //
  // Aliases: `no-emphasis-as-heading`
  //
  // Parameters:
  //
  // - `punctuation`: Punctuation characters (`string`, default `.,;:!?。，；：！？`)
  //
  // This check looks for instances where emphasized (i.e. bold or italic) text is
  // used to separate sections, where a heading should be used instead.
  //
  // To fix this, use Markdown headings instead of emphasized text to denote
  // sections.
  //
  // NOTE: This rule looks for single-line paragraphs that consist entirely of
  //       emphasized text. It won't fire on emphasis used within regular text, 
  //       multi-line emphasized paragraphs, or paragraphs ending in punctuation 
  //       (normal or full-width). Similarly to rule MD026, you can configure what 
  //       characters are recognized as punctuation.
  //
  // Rationale: Using emphasis instead of a heading prevents tools from inferring
  // the structure of a document. More information:
  // <https://cirosantilli.com/markdown-style-guide#emphasis-vs-headers.>
  "MD036": {
    // Punctuation characters
    "punctuation": ".,;:!?。，；：！？"
  },

  // MD037/no-space-in-emphasis - Spaces inside emphasis markers
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md037.md
  //
  // Tags: `emphasis`, `whitespace`
  //
  // Aliases: `no-space-in-emphasis`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when emphasis markers (bold, italic) are used, but they
  // have spaces between the markers and the text.
  //
  // To fix this, remove the spaces around the emphasis markers.
  //
  // Rationale: Emphasis is only parsed as such when the asterisks/underscores
  // aren't surrounded by spaces. This rule attempts to detect where they were
  // surrounded by spaces, but it appears that emphasized text was intended by the
  // author.
  "MD037": true,

  // MD038/no-space-in-code - Spaces inside code span elements
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md038.md
  //
  // Tags: `code`, `whitespace`
  //
  // Aliases: `no-space-in-code`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered for code span elements that have spaces adjacent to the
  // backticks.
  //
  // To fix this, remove any spaces adjacent to the backticks.
  //
  // NOTE: A single leading and trailing space is allowed by the specification and
  //       automatically trimmed (in order to allow for code spans that embed backticks).
  //        
  //       ```md
  //       `` `backticks` ``
  //       ```
  //
  // NOTE: A single leading or trailing space is allowed if used to separate code
  //       span markers from an embedded backtick (though the space is not trimmed).
  //        
  //       ```md
  //       `` ` embedded backtick``
  //       ```
  //
  // Rationale: Violations of this rule are usually unintentional and may lead to
  // improperly-rendered content. If spaces beside backticks are intentional, this
  // rule can be disabled for that line or file.
  "MD038": true,

  // MD039/no-space-in-links - Spaces inside link text
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md039.md
  //
  // Tags: `links`, `whitespace`
  //
  // Aliases: `no-space-in-links`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered on links that have spaces surrounding the link text.
  //
  // To fix this, remove the spaces surrounding the link text.
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD039": true,

  // MD040/fenced-code-language - Fenced code blocks should have a language specified
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md040.md
  //
  // Tags: `code`, `language`
  //
  // Aliases: `fenced-code-language`
  //
  // Parameters:
  //
  // - `allowed_languages`: List of languages (`string[]`, default `[]`)
  // - `language_only`: Require language only (`boolean`, default `false`)
  //
  // This rule is triggered when fenced code blocks are used, but a la>nguage isn't
  // specified:
  //
  // To fix this, add a language specifier to the code block:>
  //
  // To display a code block without syntax highlighting, use:
  //
  // ```md
  // ```text
  // Plain text in a code block
  // ```
  // ```
  //
  // You can configure the `allowed_languages` parameter to specify a list of
  // languages code blocks could use. Languages are case sensitive. The default
  // value is `[]` which means any language specifier is valid.
  //
  // You can prevent extra data from being present in the info string of fenced code
  // blocks. To do so, set the `language_only` parameter to `true`.
  //
  // Info strings with leading/trailing whitespace (ex: `js` ) or other content (ex:
  // `ruby startline=3`) will trigger this rule.
  //
  // Rationale: Specifying a language improves content rendering by using the
  // correct syntax highlighting for code. More information:
  // <https://cirosantilli.com/markdown-style-guide#option-code-fenced>.
  "MD040": {
    // List of languages
    "allowed_languages": [],
    // Require language only
    "language_only": false
  },

  // MD041/first-line-heading/first-line-h1 - First line in a file should be a top-level heading
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md041.md
  //
  // Tags: `headings`
  //
  // Aliases: `first-line-h1`, `first-line-heading`
  //
  // Parameters:
  //
  // - `front_matter_title`: RegExp for matching title in front matter (`string`, 
  //   default `^\s*title\s*[:=]`)
  // - `level`: Heading level (`integer`, default `1`)
  //
  // This rule is intended to ensure documents have a title and is triggered when
  // the first line in the file isn't a top-level (h1) heading.
  //
  // To fix this, add a top-level heading to the beginning of the file.
  //
  // Because it is common for projects on GitHub to use an image for the heading of
  // `README.md` and that is not well-supported by Markdown, HTML headings are also
  // permitted by this rule. For example.
  //
  // ```md
  // <h1 align="center"><img src="https://placekitten.com/300/150"/></h1>
  //
  // This is a file with a top-level HTML heading
  // ```
  //
  // NOTE: The `level` parameter can be used to change the top-level (ex: to h2) in
  //       cases where an h1 is added externally.
  //
  // If YAML front matter is present and contains a `title` property (commonly used
  // with blog posts), this rule will not report a violation. To use a different
  // property name in the front matter, specify the text of a regular expression via
  // the `front_matter_title` parameter. To disable the use of front matter by this
  // rule, specify `""` for `front_matter_title`.
  //
  // Rationale: The top-level heading often acts as the title of a document. More
  // information: <https://cirosantilli.com/markdown-style-guide#top-level-header>.
  "MD041": {
    // Heading level
    "level": 1,
    // RegExp for matching title in front matter
    "front_matter_title": "^\\s*title\\s*[:=]"
  },

  // MD042/no-empty-links - No empty links
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md042.md
  //
  // Tags: `links`
  //
  // Aliases: `no-empty-links`
  //
  // This rule is triggered when an empty link is encountered.
  //
  // To fix the violation, provide a destination for the link.
  //
  // Empty fragments will trigger this rule:
  //
  // ```md
  // [an empty fragment](#)
  // ```
  //
  // But non-empty fragments will not:
  //
  // ```md
  // [a valid fragment](#fragment)
  // ```
  //
  // Rationale: Empty links do not lead anywhere and therefore don't function as links.
  "MD042": true,

  // MD043/required-headings - Required heading structure
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md043.md
  //
  // Tags: `headings`
  //
  // Aliases: `required-headings`
  //
  // Parameters:
  //
  // - `headings`: List of headings (`string[]`, default `[]`)
  // - `match_case`: Match case of headings (`boolean`, default `false`)
  //
  // This rule is triggered when the headings in a file do not match the array of
  // headings passed to the rule. It can be used to enforce a standard heading
  // structure for a set of files.
  //
  // To require exactly the following structure:
  //
  // ```md
  // # Head
  // ## Item
  // ### Detail
  // ```
  //
  // Set the `headings` parameter to:
  //
  // ```json
  // [
  //     "# Head",
  //     "## Item",
  //     "### Detail"
  // ]
  // ```
  //
  // To allow optional headings as with the following structure:
  //
  // ```md
  // # Head
  // ## Item
  // ### Detail (optional)
  // ## Foot
  // ### Notes (optional)
  // ```
  //
  // Use the special value `"*"` meaning "zero or more unspecified headings" or the
  // special value `"+"` meaning "one or more unspecified headings" and set the
  // `headings` parameter to.
  //
  // ```json
  // [
  //     "# Head",
  //     "## Item",
  //     "*",
  //     "## Foot",
  //     "*"
  // ]
  // ```
  //
  // When an error is detected, this rule outputs the line number of the first
  // problematic heading (otherwise, it outputs the last line number of the file).
  //
  // Note that while the `headings` parameter uses the "## Text" ATX heading style
  // for simplicity, a file may use any supported heading style.
  //
  // By default, the case of headings in the document is not required to match that
  // of `headings`. To require that case match exactly, set the `match_case`
  // parameter to `true`.
  //
  // Rationale: Projects may wish to enforce a consistent document structure across
  // a set of similar content.
  "MD043": {
    // List of headings
    "headings": ["*"],
    // Match case of headings
    "match_case": false
  },

  // MD044/proper-names - Proper names should have the correct capitalization
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md044.md
  //
  // Tags: `spelling`
  //
  // Aliases: `proper-names`
  //
  // Parameters:
  //
  // - `code_blocks`: Include code blocks (`boolean`, default `true`)
  // - `html_elements`: Include HTML elements (`boolean`, default `true`)
  // - `names`: List of proper names (`string[]`, default `[]`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when any of the strings in the `names` array do not have
  // the specified capitalization. It can be used to enforce a standard letter case
  // for the names of projects and products.
  //
  // For example, the language "JavaScript" is usually written with both the 'J' and
  // 'S' capitalized - though sometimes the 's' or 'j' appear in lower-case. To
  // enforce the proper capitalization, specify the desired letter case in the
  // `names` array.
  //
  // Set the `code_blocks` parameter to `false` to disable this rule for code blocks
  // and spans. Set the `html_elements` parameter to `false` to disable this rule
  // for HTML elements and attributes (such as when using a proper name as part of
  // a path for `a`/`href` or `img`/`src`).
  //
  // Rationale: Incorrect capitalization of proper names is usually a mistake.
  "MD044": {
    // List of proper names
    "names": [],
    // Include code blocks
    "code_blocks": true,
    // Include HTML elements
    "html_elements": true
  },

  // MD045/no-alt-text - Images should have alternate text (alt text)
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md045.md
  //
  // Tags: `accessibility`, `images`
  //
  // Aliases: `no-alt-text`
  //
  // This rule is triggered when an image is missing alternate text (alt text)
  // information.
  //
  // Alternate text is commonly specified inline as:
  //
  // ```md
  // ![Alternate text](image.jpg)
  // ```
  //
  // Or with reference syntax as:
  //
  // ```md
  // ![Alternate text][ref]
  //
  // ...
  //
  // [ref]: image.jpg "Optional title"
  // ```
  //
  // Or with HTML as:
  //
  // ```html
  // <img src="image.jpg" alt="Alternate text" />
  // ```
  //
  // Guidance for writing alternate text is available from the W3C, Wikipedia, and
  // other locations.
  //
  // Rationale: Alternate text is important for accessibility and describes the
  // content of an image for people who may not be able to see it.
  "MD045": true,

  // MD046/code-block-style - Code block style
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md046.md
  //
  // Tags: `code`
  //
  // Aliases: `code-block-style`
  //
  // Parameters:
  //
  // - `style`: Block style (`string`, default `consistent`, values `consistent` / 
  //   `fenced` / `indented`)
  //
  // This rule is triggered when unwanted or different code block styles are used in
  // the same document.
  //
  // In the default configuration this rule reports a violation for the following document:
  //
  // ````
  // Some text.
  //
  //     # Indented code
  //
  // More text.
  //
  // ```ruby
  // # Fenced code
  // ```
  //
  // More text.
  // ````
  //
  // To fix violations of this rule, use a consistent style (either indenting or
  // code fences).
  //
  // The specified style can be specific (`fenced`, `indented`) or simply require
  // that usage be consistent within the document (`consistent`).
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD046": {
    // Block style
    "style": "fenced"
  },

  // MD047/single-trailing-newline - Files should end with a single newline character
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md047.md
  //
  // Tags: `blank_lines`
  //
  // Aliases: `single-trailing-newline`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when there is not a single newline character at the end
  // of a file.
  //
  // An example that triggers the rule:
  //
  // ```md
  // # Heading
  //
  // This file ends without a newline.[EOF]
  // ```
  //
  // To fix the violation, add a newline character to the end of the file.
  //
  // ```md
  // # Heading
  //
  // This file ends with a newline.
  // [EOF]
  // ```
  //
  // Rationale: Some programs have trouble with files that do not end with
  // a newline.
  "MD047": true,

  // MD048/code-fence-style - Code fence style
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md048.md
  //
  // Tags: `code`
  //
  // Aliases: `code-fence-style`
  //
  // Parameters:
  //
  // - `style`: Code fence style (`string`, default `consistent`, values `backtick` / 
  //   `consistent` / `tilde`)
  //
  // This rule is triggered when the symbols used in the document for fenced code
  // blocks do not match the configured code fence style.
  //
  // To fix this issue, use the configured code fence style throughout the document.
  //
  // The configured list style can be a specific symbol to use (backtick, tilde), or
  // can require that usage be consistent within the document.
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD048": {
    // Code fence style
    "style": "tilde"
  },

  // MD049/emphasis-style - Emphasis style
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md049.md
  //
  // Tags: `emphasis`
  //
  // Aliases: `emphasis-style`
  //
  // Parameters:
  //
  // - `style`: Emphasis style (`string`, default `consistent`, values `asterisk` / 
  //   `consistent` / `underscore`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when the symbols used in the document for emphasis do
  // not match the configured emphasis style.
  //
  // ```md
  // *Text*
  // _Text_
  // ```
  //
  // To fix this issue, use the configured emphasis style throughout the document.
  //
  // ```md
  // *Text*
  // *Text*
  // ```
  //
  // The configured emphasis style can be a specific symbol to use ("asterisk",
  // "underscore"), or can require that usage be consistent within the document.
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD049": {
    // Emphasis style
    "style": "underscore"
  },

  // MD050/strong-style - Strong style
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md050.md
  //
  // Tags: `emphasis`
  //
  // Aliases: `strong-style`
  //
  // Parameters:
  //
  // - `style`: Strong style (`string`, default `consistent`, values `asterisk` / 
  //   `consistent` / `underscore`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when the symbols used in the document for strong do not
  // match the configured strong style.
  //
  // To fix this issue, use the configured strong style throughout the document.
  //
  // The configured strong style can be a specific symbol to use ("asterisk",
  // "underscore"), or can require that usage be consistent within the document.
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  "MD050": {
    // Strong style
    "style": "asterisk"
  },

  // MD051/link-fragments - Link fragments should be valid
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md051.md
  //
  // Tags: `links`
  //
  // Aliases: `link-fragments`
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // This rule is triggered when a link fragment does not match any of the fragments
  // that are automatically generated for headings in a document.
  //
  // To fix this issue, change the link fragment to reference an existing heading's
  // generated name (see below).
  //
  // Alternatively, some platforms allow the syntax `{#named-anchor}` to be used
  // within a heading to provide a specific name (consisting of only lower-case
  // letters, numbers, `-`, and `_`).
  //
  // ```md
  // # Heading Name {#custom-name}
  //
  // [Link](#custom-name)
  // ```
  //
  // Alternatively, any HTML tag with an `id` attribute or an `a` tag with a `name`
  // attribute can be used to define a fragment.
  //
  // ```md
  // <a id="bookmark"></a>
  //
  // [Link](#bookmark)
  // ```
  //
  // An `a` tag can be useful in scenarios where a heading is not appropriate or 
  // for control over the text of the fragment identifier.
  //
  // Rationale: GitHub section links are created automatically for every heading
  // when Markdown content is displayed on GitHub. This makes it easy to link
  // directly to different sections within a document. However, section links change
  // if headings are renamed or removed. This rule helps identify broken section
  // links within a document.
  //
  // Section links are **not** part of the CommonMark specification. This rule
  // enforces the GitHub heading algorithm which is: convert heading to lowercase,
  // remove punctuation, convert spaces to dashes, append an incrementing integer 
  // as needed for uniqueness.
  "MD051": true,

  // MD052/reference-links-images - Reference links and images should use a label that is defined
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md052.md
  //
  // Tags: `images`, `links`
  //
  // Aliases: `reference-links-images`
  //
  // Parameters:
  //
  // - `shortcut_syntax`: Include shortcut syntax (`boolean`, default `false`)
  //
  // Links and images in Markdown can provide the link destination or image source
  // at the time of use or can define it elsewhere and use a label for reference.
  // The reference format is convenient for keeping paragraph text clutter-free and
  // makes it easy to reuse the same URL in multiple places.
  //
  // There are three kinds of reference links and images:
  //
  // ```md
  // Full: [text][label]
  // Collapsed: [label][]
  // Shortcut: [label]
  //
  // Full: ![text][image]
  // Collapsed: ![image][]
  // Shortcut: ![image]
  //
  // [label]: https://example.com/label
  // [image]: https://example.com/image
  // ```
  //
  // A link or image renders correctly when the corresponding label is defined, but
  // displays as text with brackets when the label is not present. By default, this
  // rule warns of undefined labels for "full" and "collapsed" reference syntax but
  // not for "shortcut" syntax because it is ambiguous.
  //
  // The text `[example]` could be a shortcut link or the text "example" in
  // brackets, so "shortcut" syntax is ignored by default. To include "shortcut"
  // syntax, set the `include_shortcut` parameter to `true`. Note that doing so
  // produces warnings for _all_ text in the document that _could_ be a shortcut. If
  // bracketed text is intentional, brackets can be escaped with the `\` character:
  // `\[example\]`.
  "MD052": {
    // Include shortcut syntax
    "shortcut_syntax": false
  },

  // MD053/link-image-reference-definitions - Link and image reference definitions should be needed
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md053.md
  //
  // Tags: `images`, `links`
  //
  // Aliases: `link-image-reference-definitions`
  //
  // Parameters:
  //
  // - `ignored_definitions`: Ignored definitions (`string[]`, default `["//"]`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // Links and images in Markdown can provide the link destination or image source
  // at the time of use or can use a label to reference a definition elsewhere in
  // the document. The latter reference format is convenient for keeping paragraph
  // text clutter-free and makes it easy to reuse the same URL in multiple places.
  //
  // Because link and image reference definitions are located separately from where
  // they are used, there are two scenarios where a definition can be unnecessary.
  //
  // 1. If a label is not referenced by any link or image in a document, that
  //    definition is unused and can be deleted.
  // 2. If a label is defined multiple times in a document, the first definition is
  //    used and the others can be deleted.
  //
  // This rule considers a reference definition to be used if any link or image
  // reference has the corresponding label. The "full", "collapsed", and "shortcut"
  // formats are all supported.
  //
  // If there are reference definitions that are deliberately unreferenced, they can
  // be ignored by setting the `ignored_definitions` parameter. The default value of
  // this parameter ignores the following convention for adding non-HTML comments to
  // Markdown.
  //
  // ```md
  // [//]: # (This behaves like a comment)
  // ```
  "MD053": {
    // Ignored definitions
    "ignored_definitions": [
      "//"
    ]
  },

  // MD054/link-image-style - Link and image style
  // https://github.com/DavidAnson/markdownlint/blob/v0.32.1/doc/md054.md
  //
  // Tags: `images`, `links`
  //
  // Aliases: `link-image-style`
  //
  // Parameters:
  //
  // - `autolink`: Allow autolinks (`boolean`, default `true`)
  // - `collapsed`: Allow collapsed reference links and images (`boolean`, default `true`)
  // - `full`: Allow full reference links and images (`boolean`, default `true`)
  // - `inline`: Allow inline links and images (`boolean`, default `true`)
  // - `shortcut`: Allow shortcut reference links and images (`boolean`, default `true`)
  // - `url_inline`: Allow URLs as inline links (`boolean`, default `true`)
  //
  // Fixable: Some violations can be fixed by tooling
  //
  // Links and images in Markdown can provide the link destination or image source
  // at the time of use or can use a label to reference a definition elsewhere in
  // the document. The three reference formats are convenient for keeping paragraph
  // text clutter-free and make it easy to reuse the same URL in multiple places.
  //
  // By default, this rule allows all link/image styles.
  //
  // Setting the `autolink` parameter to `false` disables autolinks:
  //
  // ```md
  // <https://example.com>
  // ```
  //
  // Setting the `inline` parameter to `false` disables inline links and images:
  //
  // ```md
  // [link](https://example.com)
  //
  // ![image](https://example.com)
  // ```
  //
  // Setting the `full` parameter to `false` disables full reference links and images:
  //
  // ```md
  // [link][url]
  //
  // ![image][url]
  //
  // [url]: https://example.com
  // ```
  //
  // Setting the `collapsed` parameter to `false` disables collapsed reference links
  // and images:
  //
  // ```md
  // [url][]
  //
  // ![url][]
  //
  // [url]: https://example.com
  // ```
  //
  // Setting the `shortcut` parameter to `false` disables shortcut reference links
  // and images:
  //
  // ```md
  // [url]
  //
  // ![url]
  //
  // [url]: https://example.com
  // ```
  //
  // To fix violations of this rule, change the link or image to use an allowed
  // style. This rule can automatically fix violations when a link or image can be
  // converted to the `inline` style (preferred) or a link can be converted to the
  // `autolink` style (which does not support images and must be an absolute URL).
  // This rule does _not_ fix scenarios that require converting a link or image to
  // the `full`, `collapsed`, or `shortcut` reference styles because that involves
  // naming the reference and determining where to insert it in the document.
  //
  // Setting the `url_inline` parameter to `false` prevents the use of inline links
  // with the same absolute URL text/destination and no title because such links can
  // be converted to autolinks:
  //
  // ```md
  // [https://example.com](https://example.com)
  // ```
  //
  // To fix `url_inline` violations, use the simpler autolink syntax instead:
  //
  // ```md
  // <https://example.com>
  // ```
  //
  // Rationale: Consistent formatting makes it easier to understand a document.
  // Autolinks are concise, but appear as URLs which can be long and confusing.
  // Inline links and images can include descriptive text, but take up more space in
  // Markdown form. Reference links and images can be easier to read and manipulate
  // in Markdown form, but require a separate link reference definition.
  "MD054": {
    // Allow autolinks
    "autolink": true,
    // Allow inline links and images
    "inline": true,
    // Allow full reference links and images
    "full": true,
    // Allow collapsed reference links and images
    "collapsed": true,
    // Allow shortcut reference links and images
    "shortcut": true,
    // Allow URLs as inline links
    "url_inline": true
  }
}
